#!/bin/bash

if [ $# -lt 6  ]; then
    echo "<user> <op> <proj> <arg> <offline> <hadoop_home>"
    echo "incorrect usage."
    echo "<arg> is the python version for 'create' and the source env for 'clone'."
 exit 1
fi

EXEC_AS_USER=$1
OP=$2
PROJECT=$3
PYTHON_VERSION=$4
OFFLINE=$5
HADOOP_DIR=$6
CLONE=


if [ "$OP" == "CLONE" ] ; then
   CLONE="--clone $4"
fi

function exists() {
    su $EXEC_AS_USER -c "<%= node["conda"]["base_dir"] %>/bin/conda info --envs | grep '^${PROJECT} '"
    return $?
}

if [ "$OP" == "CREATE" ] ; then
    exists
    if [ $? -eq 0 ] ; then 
       exit 0
    fi
    su $EXEC_AS_USER -c "<%= node["conda"]["base_dir"] %>/bin/conda create -n $PROJECT python=$PYTHON_VERSION -y -q $OFFLINE"
    su $EXEC_AS_USER -c "export HADOOP_HOME=$HADOOP_DIR && <%= node["conda"]["base_dir"] %>/envs/${PROJECT}/bin/pip install hdfscontents"
    su $EXEC_AS_USER -c "<%= node["conda"]["base_dir"] %>/envs/${PROJECT}/bin/pip install hopsutil"
#    su $EXEC_AS_USER -c "<%= node["conda"]["base_dir"] %>/bin/pip install tfspark"        
elif [ "$OP" == "LIST_ENVS" ] ; then
  su $EXEC_AS_USER -c "<%= node["conda"]["base_dir"] %>/bin/conda env list --json > /tmp/conda_envs.json"    
elif [ "$OP" == "LIST" ] ; then
  su $EXEC_AS_USER -c "<%= node["conda"]["base_dir"] %>/bin/conda list -n $PROJECT --json > /tmp/${PROJECT}__conda_list.json"
elif [ "$OP" == "CLONE" ] ; then
  su $EXEC_AS_USER -c "<%= node["conda"]["base_dir"] %>/bin/conda create -n $PROJECT --clone $CLONE -y -q $OFFLINE"
elif [ "$OP" == "REMOVE" ] ; then
    exists    # If the env has already been removed, return OK
    if [ $? -ne 0 ] ; then
       echo "Cannot remove environment that doesn't exist"
       exit 0
    fi
  su $EXEC_AS_USER -c "<%= node["conda"]["base_dir"] %>/bin/conda-env remove -n $PROJECT -y -q"
else
    exit -1
fi

