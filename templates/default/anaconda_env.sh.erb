#!/bin/bash

if [ $# -lt 3  ]; then
    echo "<user> <op> <proj> <arg>"
    echo "incorrect usage"
 exit 1
fi

set -e

EXEC_AS_USER=$1
OP=$2
PROJECT=$3

CLONE=

if [ "$OP" == "CLONE" ] ; then
   CLONE="--clone $4"
fi

if [ "$OP" == "CREATE" ] ; then
    su $EXEC_AS_USER -c "<%= node.anaconda.base_dir %>/bin/conda create -n $PROJECT -y -q"
elif [ "$OP" == "LIST_ENVS" ] ; then
  su $EXEC_AS_USER -c "<%= node.anaconda.base_dir %>/bin/conda env list --json > /tmp/conda_envs.json"    
elif [ "$OP" == "LIST" ] ; then
  su $EXEC_AS_USER -c "<%= node.anaconda.base_dir %>/bin/conda list -n $PROJECT --json > /tmp/${PROJECT}__conda_list.json"
elif [ "$OP" == "CLONE" ] ; then
  su $EXEC_AS_USER -c "<%= node.anaconda.base_dir %>/bin/conda create -n $PROJECT --clone $CLONE -y -q"
elif [ "$OP" == "REMOVE" ] ; then
  su $EXEC_AS_USER -c "<%= node.anaconda.base_dir %>/bin/conda-env remove -n $PROJECT -y -q"
    # Verify the environment has been deleted
    # Need to first make sure that projectnames are not partial names of other projectnames, else this might return a false positive (error)
    # One way would be to have environment names as follows: "projectname__" - '__' is not allowed as a sequence of chars in a projectname.
#    conda info --envs | grep $PROJECT 
else
    exit -1
fi

